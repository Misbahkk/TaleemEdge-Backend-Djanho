# Generated by Django 5.2.5 on 2025-09-13 12:41

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="PlatformActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("user_registration", "User Registration"),
                            ("workshop_enrollment", "Workshop Enrollment"),
                            ("book_download", "Book Downloaded"),
                            ("mentor_application", "Mentor Application"),
                            ("scholarship_application", "Scholarship Application"),
                        ],
                        max_length=50,
                    ),
                ),
                ("user_name", models.CharField(max_length=255)),
                ("description", models.CharField(max_length=500)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name_plural": "Platform Activities",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PlatformSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("site_name", models.CharField(default="Taleem Edge", max_length=255)),
                ("site_description", models.TextField(default="Educational Platform")),
                ("primary_color", models.CharField(default="#10B981", max_length=7)),
                ("secondary_color", models.CharField(default="#3B82F6", max_length=7)),
                (
                    "logo",
                    models.ImageField(blank=True, null=True, upload_to="branding/"),
                ),
                (
                    "favicon",
                    models.ImageField(blank=True, null=True, upload_to="branding/"),
                ),
                ("maintenance_mode", models.BooleanField(default=False)),
                ("allow_new_registrations", models.BooleanField(default=True)),
                (
                    "hero_title",
                    models.CharField(default="Welcome to Taleem Edge", max_length=255),
                ),
                (
                    "hero_subtitle",
                    models.TextField(default="Your Gateway to Quality Education"),
                ),
                (
                    "hero_image",
                    models.ImageField(blank=True, null=True, upload_to="hero/"),
                ),
                ("announcement_enabled", models.BooleanField(default=False)),
                ("announcement_text", models.TextField(blank=True)),
                ("announcement_link", models.URLField(blank=True)),
                (
                    "announcement_type",
                    models.CharField(
                        choices=[
                            ("info", "Info"),
                            ("warning", "Warning"),
                            ("success", "Success"),
                        ],
                        default="info",
                        max_length=20,
                    ),
                ),
                ("contact_email", models.EmailField(blank=True, max_length=254)),
                ("contact_phone", models.CharField(blank=True, max_length=20)),
                ("contact_address", models.TextField(blank=True)),
                ("facebook_url", models.URLField(blank=True)),
                ("twitter_url", models.URLField(blank=True)),
                ("linkedin_url", models.URLField(blank=True)),
                ("instagram_url", models.URLField(blank=True)),
                ("youtube_url", models.URLField(blank=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Platform Settings",
                "verbose_name_plural": "Platform Settings",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("full_name", models.CharField(max_length=255)),
                (
                    "email",
                    models.EmailField(
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[("admin", "Admin"), ("student", "Student")],
                        default="student",
                        max_length=10,
                    ),
                ),
                (
                    "school_name",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "profile_picture",
                    models.ImageField(blank=True, null=True, upload_to="profile_pics/"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
